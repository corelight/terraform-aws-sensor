name: Trivy Security Scan

on:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * *'          # Nightly at 03:00 UTC
  workflow_dispatch:

jobs:
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest

    permissions:                 # allow issue / comment creation
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Install & run Trivy scan (table output)
        id: trivy
        shell: bash
        continue-on-error: true              # let later steps run on failure
        run: |
          echo "🔧 Installing Trivy ..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin

          echo "Running Trivy scan ..."
          trivy fs \
            --config scripts/trivy/trivy.yml \
            --format table \
            --output trivy-report.txt \
            --exit-code 1 \
            .

          echo "==================== Trivy Report ===================="
          if [[ -f trivy-report.txt ]]; then
            cat trivy-report.txt
          else
            echo "No report generated."
          fi
          echo "======================================================"

      - name: Create or update GitHub Issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs   = require('fs');
            const { owner, repo } = context.repo;

            // Read the Trivy table from the workspace
            const report = fs.readFileSync('trivy-report.txt', 'utf8')
                              .trim()
                              .slice(0, 60000);  // safety cut-off (GitHub issue body limit 65535)

            const title = `⚠️ Trivy scan failed on ${context.ref}`;
            const body  = `
            **Trivy security scan detected HIGH/CRITICAL findings.**

            \`\`\`
            ${report}
            \`\`\`

            _Workflow run:_ ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
            `;

            // Look for an open issue with exactly this title + labels
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'security,trivy',
              per_page: 100
            });

            const existing = issues.find(i => i.title === title);

            if (existing) {
              // Append findings as a new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existing.number,
                body
              });
              console.log(`Appended scan results to existing issue (#${existing.number}).`);
            } else {
              // Create a fresh issue
              await github.rest.issues.create({
                owner,
                repo,
                title,
                body,
                labels: ['security', 'trivy']
              });
              console.log('Created new Trivy scan issue with findings.');
            }
